[  {    "type": "post",    "url": "/signin",    "title": "Login into the system",    "description": "<p>This route is for login. All params must be in request body.</p>",    "name": "Sign_In",    "group": "Auth",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "sting",            "optional": false,            "field": "email",            "description": "<p>User's email</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "password",            "description": "<p>User's password</p>"          }        ]      }    },    "sampleRequest": [      {        "url": "127.0.0.1:3000/signin"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "token",            "description": "<p>Token for access to the API</p>"          },          {            "group": "Success 200",            "type": "json",            "optional": false,            "field": "user",            "description": "<p>User model</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "app/routes/login/login.controller.js",    "groupTitle": "Auth"  },  {    "type": "post",    "url": "/signup",    "title": "Register new user in the system",    "description": "<p>This route for registration All params must be in request body. Account will be created and assigned as defaultAccount with created user. Account name will be ${username} - default account.</p>",    "name": "Sign_Up",    "group": "Auth",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "sting",            "optional": false,            "field": "name",            "description": "<p>User's name.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "password",            "description": "<p>User's password.</p>"          }        ]      }    },    "sampleRequest": [      {        "url": "127.0.0.1:3000/signup"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "JSON",            "optional": false,            "field": "user",            "description": "<p>Newly created user's instance.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "app/routes/login/login.controller.js",    "groupTitle": "Auth"  },  {    "type": "post",    "url": "/token",    "title": "Verify token",    "description": "<p>This route for checking token validity All params must be in request body.</p>",    "name": "Token",    "group": "Auth",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "sting",            "optional": false,            "field": "token",            "description": "<p>Token</p>"          }        ]      }    },    "sampleRequest": [      {        "url": "127.0.0.1:3000/signup"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "boolean",            "optional": false,            "field": "isValid",            "description": "<p>result of checking.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "app/routes/login/login.controller.js",    "groupTitle": "Auth"  },  {    "type": "post",    "url": "/api/products",    "title": "Create new Product",    "description": "<p>This route for creating product.</p> <p>All data should be in request body</p> <p>Categories is array of objects like {name: 'drinks'}. If category with such name not yet created it will be.</p> <p>Measure is an object like {name: 'kilograms', shornname: 'kg} Also if it's not in DB yet, it will be created</p>",    "name": "createProducts",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Product name</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": false,            "field": "categories",            "description": "<p>Product categories</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "measure",            "description": "<p>Product measure</p>"          }        ]      }    },    "group": "Products",    "version": "0.0.0",    "filename": "app/routes/products/products.controller.js",    "groupTitle": "Products"  },  {    "type": "get",    "url": "/api/products",    "title": "Get products list",    "description": "<p>This route for receiving products list.</p>",    "name": "getProducts",    "group": "Products",    "version": "0.0.0",    "filename": "app/routes/products/products.controller.js",    "groupTitle": "Products"  },  {    "type": "get",    "url": "/api/*",    "title": "Querying rules",    "description": "<p>Basic API rules for building queries.</p> <p>Example GET api/users?query={&quot;query&quot;:{&quot;name&quot;: &quot;John&quot;}}</p> <p>or</p> <p>Example GET api/users?query={&quot;query&quot;:{&quot;name&quot;: { &quot;$iLike&quot;: &quot;Jo%&quot;}}}</p> <p>The list of all available operators could be found in http://docs.sequelizejs.com/en/latest/docs/querying</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "JSON",            "optional": true,            "field": "query",            "description": "<p>Query to be applied to filter list</p>"          }        ]      }    },    "name": "Query_Rules",    "group": "Rules",    "version": "0.0.0",    "filename": "app/routes/index.js",    "groupTitle": "Rules"  },  {    "type": "post",    "url": "/api/transactions/:transactionId/purchases",    "title": "TBD - Add purchase",    "description": "<p>TBD</p> <p>This route will be implemented to add purchase into existing transaction</p>",    "name": "addPurchase",    "group": "Transaction",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "auth-token",            "description": "<p>Authorization token</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "FLOAT",            "optional": true,            "field": "price",            "description": "<p>Price of the purchase</p>"          },          {            "group": "Parameter",            "type": "FLOAT",            "optional": true,            "field": "cost",            "description": "<p>Cost of the purchase</p>"          },          {            "group": "Parameter",            "type": "FLOAT",            "optional": true,            "field": "quantity",            "defaultValue": "1",            "description": "<p>Quantity of the purchase</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Product name</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "app/routes/transactions/transactions.controller.js",    "groupTitle": "Transaction"  },  {    "type": "post",    "url": "/api/transaction",    "title": "Create new Transaction",    "description": "<p>This route for creating transaction.</p> <p>All data should be in request body.</p>",    "name": "createTransaction",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "marketlape",            "description": "<p>Marketplace name</p>"          },          {            "group": "Parameter",            "type": "Date",            "optional": true,            "field": "transactionDate",            "defaultValue": "today",            "description": "<p>Date of the transaction</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "accountId",            "defaultValue": "currentUser.defaultAccount",            "description": "<p>Account of transaction</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": false,            "field": "purchases",            "description": "<p>List of purchases in transaction. Purchase should be an object like:</p> <p>{</p> <p>&quot;product&quot;: &quot;beer&quot;,</p> <p>&quot;quantity&quot;: FLOAT //default value = 1</p> <p>&quot;cost&quot;: FLOAT</p> <p>&quot;price&quot;: FLOAT</p> <p>}</p> <p>One of the fields cost or price must be set. If set price - cost will be calculated else price will be calculated from cost.</p>"          }        ]      }    },    "group": "Transaction",    "version": "0.0.0",    "filename": "app/routes/transactions/transactions.controller.js",    "groupTitle": "Transaction"  },  {    "type": "get",    "url": "/api/transaction",    "title": "Get Transactions List",    "description": "<p>This route for getting transactions.</p> <p>Account, Purchases with Product and Marketplace models will be included in result item</p> <p>Query parameters works as usual (see Rules section)</p> <p>If no accountId provided default user's account will be used</p>",    "name": "getTransaction",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "json",            "optional": true,            "field": "query",            "description": "<p>Query for list filtering</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "optional": false,            "field": "Array",            "description": "<p><Transaction> List of transactions</p>"          }        ]      }    },    "group": "Transaction",    "version": "0.0.0",    "filename": "app/routes/transactions/transactions.controller.js",    "groupTitle": "Transaction"  }]
